{"version":3,"sources":["components/Header/Header.js","components/Input/Input.js","components/Button/Button.js","components/Settings/Settings.js","components/Settings/index.js","data/actions/state.js","components/Champion/Champion.js","components/Champion/index.js","components/Game/Game.js","components/Game/index.js","components/Round/Round.js","data/helperFunctions/gameArrayCreator.js","components/Round/index.js","components/Tournament/Tournament.js","components/Tournament/index.js","components/Footer/Footer.js","data/helperFunctions/isPowerOf2.js","components/Footer/index.js","components/Music/Music.js","components/App/App.js","components/App/index.js","data/initial.js","data/helperFunctions/addGameID.js","data/reducer.js","data/helperFunctions/shuffleArray.js","data/store.js","index.js"],"names":["Header","className","Input","label","name","type","value","handleChange","htmlFor","id","onChange","Button","buttonClass","handleClick","disable","onClick","disabled","defaultProps","Settings","props","state","player","bind","handleSubmitPlayer","e","this","setState","currentTarget","preventDefault","audio","Audio","src","play","handleAddPlayer","players","playerNumberError","onSubmit","length","map","i","key","Component","connect","dispatch","addPlayer","Champion","champion","Game","winner","handleP1Win","handleP2Win","player1","roundID","handleWin","player2","game","totalRounds","roundsCompleted","playerWon","Round","handleSubmitNextRound","handleNextRound","rounds","playerCounter","round","gameID","previousGame","reduce","games","current","push","gameArrayCreator","j","Tournament","complete","numberOfRounds","Footer","handleResetSubmit","handleStartTournamentSubmit","handleErrorSubmit","handleReset","handleStartTournament","handleError","n","tournamentStarted","Math","log2","startTournament","Music","musicPlaying","music","handleToggle","load","autoplay","pause","App","initial","addGameID","updateRounds","array","floor","random","shuffleArray","reducer","action","playerID","trim","nextRound","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4632762f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n    <header>\n        <h1 className=\"title\">Tourn</h1>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\n\nconst Input = ({ \n    label, \n    name, \n    type, \n    value, \n    handleChange, \n    className }) => (\n        \n  <div className=\"form-group container-form\">\n    <label htmlFor={name}>{label}</label>\n    <input\n      id={name}\n      name={name}\n      type={type}\n      value={value}\n      onChange={handleChange}\n    />\n  </div>\n);\n\nexport default Input;","import React from 'react';\n\nconst Button = ({ \n    label, \n    buttonClass,\n    type, \n    handleClick, \n    disable,\n}) => (\n  \n  <button \n    className={buttonClass}\n    onClick={handleClick}\n    type={type}\n    disabled={ disable } \n  >\n    {label}\n\n    {/* spans for css effect*/}\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </button>\n\n);\n\nButton.defaultProps = {\n  disable: false,\n};\n\nexport default Button;","import React, { Component } from 'react';\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {player: \"\"};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmitPlayer = this.handleSubmitPlayer.bind(this);\n\n    };\n\n    //controlled component, allows user to add their name  \n    handleChange(e) {\n        this.setState({ player: e.currentTarget.value });\n    };\n\n    //adds the player name to the global state players array, doesnt allow empty inputs, plays a sound effect\n    handleSubmitPlayer(e) {\n        e.preventDefault();\n        const { player } = this.state;\n\n        if(player !== \"\") {   \n            const audio = new Audio();\n            audio.src = 'assets/sounds/zapsplat_science_fiction_button_press_beep_44987.mp3';\n            audio.play();     \n            this.props.handleAddPlayer(player);\n        };\n\n        this.setState({ player: \"\"});\n    };\n\n    render() {\n        const { player } = this.state;\n        const { players, playerNumberError } = this.props;\n\n        return (\n            <>\n                <form onSubmit={this.handleSubmitPlayer} className=\"form-group container-form\">\n                    <Input\n                        label=\"Add a Player\"\n                        name=\"playerName\"\n                        type=\"text\"\n                        value={player}\n                        handleChange={this.handleChange}\n                    />\n                    { playerNumberError ? \n                    <p>Total number of players needs to be a power of 2 (i.e.2, 4, 8, 16, 32 ...) </p> : null }\n                    <Button\n                        label=\"Add\"\n                        buttonClass=\"button-blue\"\n                        type=\"submit\"\n                    />\n                </form>\n\n                <article>\n                    <h2>Players</h2>\n                    {\n                        //map over golbal state players array and add player names to the list\n                        players.length === 0 ? null :\n                        <ol>\n                            {players.map((player, i) => (\n                                <li key={i}>{player.name}</li>\n                            ))}\n                        </ol>\n                    }\n                </article>\n            </>\n        );\n    };\n};\n\nexport default Settings;","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { addPlayer } from '../../data/actions/state';\n\n\nconst mapStateToProps = ({ players, playerNumberError }) => ({ players, playerNumberError });\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleAddPlayer: (player) => dispatch(addPlayer(player)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","export const addPlayer = (player) => {\n    return {\n        player,\n        type: \"ADD_PLAYER\",\n    };\n};\n\nexport const startTournament = (players) => {\n    return {\n        players,\n        type: \"START_TOURNAMENT\",\n    };\n};\n\nexport const playerNumberError = () => {\n    return {\n        type: \"ERROR\",\n    };\n};\n\nexport const playerWon = (player, roundID) => {\n    return {\n        player, \n        roundID,\n        type: \"PLAYER_WON\",\n    };\n};\n\nexport const nextRound = () => {\n    return {\n        type: \"NEXT_ROUND\",\n    };\n};\n\nexport const reset = () => {\n    return {\n        type: \"RESET\",\n    };\n};","import React from 'react';\n\nconst Champion = ({ champion }) => (\n    <>\n        <h2 className=\"champion\">{ `${champion} wins!`}</h2>\n        <div className=\"laser-beam\"></div>\n        <div className=\"laser-beam yellow\"></div>\n        <div className=\"laser-beam blue-b\"></div>\n        <div className=\"laser-beam yellow-b\"></div>\n    </>\n);\n\nexport default Champion;","import { connect } from 'react-redux';\nimport Champion from './Champion';\n\nconst mapStateToProps = ({ champion }) => ({ champion });\n\nexport default connect(mapStateToProps)(Champion);","import React, { Component } from 'react';\nimport Button from '../Button/Button';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {winner: 0};\n\n        this.handleP1Win = this.handleP1Win.bind(this);\n        this.handleP2Win = this.handleP2Win.bind(this);\n    };\n\n    //passes the clicked player to the players array ready for the next round, plays a sound effect\n    handleP1Win(player1, roundID) {\n        const audio = new Audio();\n        audio.src = 'assets/sounds/laser.m4a';\n        audio.play();\n        this.props.handleWin(player1, roundID);\n        this.setState({winner: 1});                \n    };\n\n    handleP2Win(player2, roundID) {\n        const audio = new Audio();\n        audio.src = 'assets/sounds/laser.m4a';\n        audio.play();\n        this.props.handleWin(player2, roundID);\n        this.setState({winner: 2});        \n    };\n\n    render() {\n        const { winner } = this.state;\n        const { game, totalRounds } = this.props;\n\n        //css applied to highlight winners of each game\n        return (\n            <section className=\"container-games\">\n                <h3 className=\"game-component\">{ game.roundID === totalRounds ? \"This is it...\" : `Game ${game.id}`}</h3>\n                <div className=\"container-games\">\n                    <div className=\"container-player\">\n                        <Button \n                            buttonClass={(winner === 1 ? \"animated-\" : winner === 2 ? \" button-blue disabled-\" : \"\") + \"button-blue game-component-blue\"}\n                            handleClick={() => this.handleP1Win(game.player1, game.roundID)}\n                            type=\"button\"\n                            label=\"Won\"\n                            disable={ winner !== 0 }\n                        />\n                        <p className={(winner === 2 ? \"disabled-game-component\" : \"\") + \" game-component-blue\"}>{ game.player1 }</p>                    \n                    </div>\n                    <div className=\"container-player\">\n                        <Button \n                            buttonClass={(winner === 2 ? \"animated-\" : winner === 1 ? \"button-yellow disabled-\" : \"\") + \"button-yellow game-component-yellow\"}\n                            handleClick={() => this.handleP2Win(game.player2, game.roundID)}\n                            type=\"button\"\n                            label=\"Won\"\n                            disable={ winner !== 0 }\n                        />\n                        <p className={(winner === 1 ? \"disabled-game-component\" : \"\") + \" game-component-yellow\"}>{ game.player2 }</p>                    \n                    </div>\n                </div>\n            </section>\n        );\n    };\n};\n\nexport default Game;","import { connect } from 'react-redux';\nimport Game from './Game';\nimport { playerWon } from '../../data/actions/state';\n\nconst mapStateToProps = ({ roundsCompleted, totalRounds }) => ({ roundsCompleted, totalRounds });\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleWin: (player, roundID) => dispatch(playerWon(player, roundID)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import React, { Component } from \"react\";\nimport Game from '../Game';\nimport { gameArrayCreator } from '../../data/helperFunctions/gameArrayCreator';\nimport Button from \"../Button/Button\";\n\nclass Round extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmitNextRound = this.handleSubmitNextRound.bind(this);\n\n    };\n\n    //passes the players who won their round from the players array to the rounds array, plays sound effect depending on if its the last round or normal round  \n    handleSubmitNextRound(e, i) {\n        e.preventDefault();\n        const { totalRounds } = this.props;\n\n        if(i + 1 === totalRounds) {\n            const audio = new Audio();\n            audio.src = 'assets/sounds/Ryan_VanEerde_Sci-Fi_Explosion_2_20.mp3';\n            audio.play();\n        } else {\n            const audio = new Audio();\n            audio.src = 'assets/sounds/zapsplat_science_fiction_vehicles_zoom_by_ultra_sonic_whoosh_002_55942.mp3';\n            audio.play();\n        }\n        this.props.handleNextRound();\n    };\n\n    render() {\n        const { rounds, totalRounds, playerCounter } = this.props;\n        \n        return (\n\n            //smart title to display either, quatqrfinal, semifinal, final or round number depending on what round is being played\n            <div className=\"container-rounds\">\n                {rounds.map((round, i) => (              \n                    <article key={ i }>\n                        <h2>{ i + 1 === totalRounds ? \"Final\" : i + 1 === (totalRounds - 1) ? \"Semifinals\" : i + 1 === (totalRounds - 2) ? \"1/4 Finals\" : `Round ${ i + 1 }`}</h2>         \n                        <ul>\n                            {/* notes can be found in helper function folder */}\n                            {gameArrayCreator(round).map((game, j) => \n                                <Game \n                                    key={ j }\n                                    round={ round }\n                                    game={ game }\n                                />\n                            )}\n                        </ul>\n                        {/* button disabled until all games in the round are complete */}\n                        <Button\n                            buttonClass={ (playerCounter === (round.length / 2) ?\"animated-\" : \"button-blue disabled-\") + \"button-blue game-component-blue\"}\n                            handleClick={ (e) => this.handleSubmitNextRound(e, i) }\n                            type=\"submit\"\n                            label={ i + 1 === totalRounds ? 'Tournament Master' : \"Next Round\" }\n                            disable={ playerCounter !== (round.length / 2) } \n                        />\n                    </article>                      \n                ))}\n            </div>\n        );\n    };\n};\n\nexport default Round;\n","//reduce iterator method to create a new array of games based on the gameID of the player, if the current player gameID matches the previous player gameID a game object is created with the two players, the current roundID and a new gameID (which increments on each iteration)\n\nexport const gameArrayCreator = (players) => {\n\tlet gameID = 1;\n\tlet previousGame = {};\n\treturn players.reduce((games, current) => {\n\t\tif(current.gameID === previousGame.gameID) { \n\t\t\tgames.push({\n\t\t\t\tid: gameID,\n\t\t\t\tplayer1: previousGame.name,\n\t\t\t\tplayer2: current.name,\n\t\t\t\troundID: current.roundID,\n\t\t\t})\n\t\t\tgameID += 1\n\t\t}\n\t\tpreviousGame = current;\n\t\treturn games;\n\t}, []);\n};","import { connect } from \"react-redux\";\nimport Round from './Round';\nimport { nextRound } from '../../data/actions/state';\n\nconst mapStateToProps = ({ rounds, totalRounds, playerCounter }) => ({ rounds, totalRounds, playerCounter });\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleNextRound: () => dispatch(nextRound()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round);","import React from 'react';\nimport Champion from '../Champion';\nimport Round from '../Round';\n\nconst Tournament = ({ complete }) => (\n    <>\n    { complete ? <Champion/> : <Round /> }\n    </>\n);         \n\nexport default Tournament;\n\n","import { connect } from 'react-redux';\nimport Tournament from './Tournament';\n\nconst mapStateToProps = ({ numberOfRounds, complete }) => ({ numberOfRounds, complete });\n\nexport default connect(mapStateToProps)(Tournament);","import React, { Component } from 'react';\nimport Button from '../Button/Button';\nimport { isPowerOf2 } from '../../data/helperFunctions/isPowerOf2';\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleResetSubmit = this.handleResetSubmit.bind(this);\n        this.handleStartTournamentSubmit = this.handleStartTournamentSubmit.bind(this);\n        this.handleErrorSubmit = this.handleErrorSubmit.bind(this);\n    \n    };\n    \n    //used to reset global state to initial, plays a sound effect\n    handleResetSubmit(e) {\n        e.preventDefault();\n        const audio = new Audio();\n        audio.src = 'assets/sounds/zapsplat_science_fiction_machine_power_down_55173.mp3';\n        audio.play();\n\n        this.props.handleReset();\n    };\n\n    //used to start the tournament, plays a sound effect\n    handleStartTournamentSubmit(e) {\n        e.preventDefault();\n        const { players } = this.props;\n        const audio = new Audio();\n        audio.src = 'assets/sounds/zapsplat_science_fiction_robot_power_up_surge_003_45219.mp3';\n        audio.play();\n\n        this.props.handleStartTournament(players);\n    };\n\n    //used to handle error if user tries to start tournament without the correct number of players, plays a sound effect\n    handleErrorSubmit(e) {\n        e.preventDefault();\n        const audio = new Audio();\n        audio.src = 'assets/sounds/zapsplat_science_fiction_console_error_tone_001_38432.mp3';\n        audio.play();\n        \n        this.props.handleError();\n    };\n\n    render() {\n        const { tournamentStarted, players, complete } = this.props;\n\n        //button at footer of page changes from start tournament to new tournament once the tournament has begun\n        //when starting a new tournament a check is made to ensure the number of players is valid (i.e a power of 2)\n        return (\n            <div className=\"footer\">\n            { tournamentStarted ?    \n                <Button\n                    buttonClass={complete ? \"animated-button-blue\" : \"button-blue\"}\n                    handleClick={ this.handleResetSubmit }\n                    type=\"submit\"\n                    label=\"New Tournament\"\n                />\n                :\n                <Button            \n                    buttonClass=\"animated-button-blue\"\n                    handleClick={ isPowerOf2(players.length) ? this.handleStartTournamentSubmit : this.handleErrorSubmit }\n                    type=\"submit\"\n                    label=\"Start Tournament\"\n                />\n            }\n            </div>          \n        );\n    };\n};\n\nexport default Footer;\n","//helper function to check the input is a power of 2 and isnt 1\n\nexport const isPowerOf2 = (n) => Math.log2(n) % 1 === 0 && n !== 1;\n","import { connect } from 'react-redux';\nimport Footer from './Footer';\nimport { reset, startTournament, playerNumberError } from '../../data/actions/state';\n\nconst mapStateToProps = ({ tournamentStarted, players, complete }) => ({ tournamentStarted, players, complete });\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleReset: () => dispatch(reset()),\n        handleStartTournament: (players) => dispatch(startTournament(players)),\n        handleError: () => dispatch(playerNumberError()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React, { Component } from 'react';\nimport Button from '../Button/Button';\n\nclass Music extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            musicPlaying: true,\n            music: new Audio('assets/sounds/SearchingForYou-WhiteHex.mp3'),\n        };\n\n        this.handleToggle = this.handleToggle.bind(this);\n\n    };\n\n    //music auto plays if the user has the option turned on otherwise the will need to press the sound button\n    componentDidMount() {\n        const { music } = this.state;\n        music.load();\n        music.autoplay = true;\n    };\n\n    handleToggle() {\n        const { music, musicPlaying } = this.state;\n\n        if(musicPlaying) {\n            music.pause();\n            this.setState({ musicPlaying: false });\n        } else {\n            music.play();\n            this.setState({ musicPlaying: true });\n        };\n    };\n\n    render () {\n        const { musicPlaying } = this.state;\n\n        return (\n            <>\n            <Button \n                buttonClass=\"sound-button\"\n                handleClick={ this.handleToggle }\n                type=\"button\"\n                label={musicPlaying ? \"🔊\" : \"🔈\"}\n            />\n            </>\n        );\n    };\n};\n\nexport default Music;\n\n","import React from 'react';\nimport '../../style/css/styles.css';\nimport Header from '../Header/Header';\nimport Settings from '../Settings';\nimport Tournament from '../Tournament';\nimport Footer from '../Footer';\nimport Music from '../Music/Music';\n\nconst App = ({ tournamentStarted }) => (\n  <>\n  <Header />\n  { !tournamentStarted ? <Settings /> : <Tournament /> }\n  <Footer />\n  <Music />\n  </>\n);\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n\nconst mapStateToProps = ({ tournamentStarted }) => ({ tournamentStarted });\n\nexport default connect(mapStateToProps)(App);","const initial = {\n    tournamentStarted: false,\n    playerCounter: 0,\n    players: [],\n    rounds: [],\n    totalRounds: 0,\n    roundsCompleted: 0,\n    champion: \"\",\n    complete: false,\n    playerNumberError: false,\n  };\n  \n  export default initial;","//helper function to map over the players array and assign a gameID, the gameID increments after each pair is formed\n\nexport const addGameID = (players) => {\n    let gameID = 0;\n\n    return players.map((player, i) => {\n\t\tif(i % 2 === 0) {\n            gameID += 1;\n        } \n\t\treturn ({ ...player, gameID })\n\t});\n};","import initial from './initial';\nimport { shuffleArray } from './helperFunctions/shuffleArray';\nimport { addGameID } from './helperFunctions/addGameID';\n\n\n\n//adds players to the players array\nconst addPlayer = (state, { player }) => {    \n    return {\n        ...state,\n        playerNumberError: false,\n        playerCounter: state.playerCounter + 1,\n        players: [...state.players, \n            {\n                playerID: state.playerCounter + 1,\n                name: player.trim(),\n                roundID: 1,\n            }\n        ],\n    };\n};\n\n//starts the tournament, helper function notes can be found in the helper function folder, players are shuffled then added to the rounds array, empties the players array ready for the intake of winners of each game\nconst startTournament = (state, { players }) => {\n    let updateRounds = addGameID(shuffleArray(players));\n    let totalRounds = Math.log2(players.length);\n\n    return {\n        ...state,\n        players: initial.players,\n        rounds: [...state.rounds, updateRounds],\n        totalRounds,\n        tournamentStarted: true,\n        playerCounter: initial.playerCounter,\n        playerNumberError: false,\n    };\n};\n\n//used if an incorrect number of players (i.e not a power of 2) are attempted to be submitted\nconst playerNumberError = state => {\n    return {\n        ...state,\n        playerNumberError: true,\n    };\n};\n\n//adds the player who won their game to the players array ready for the next round of games if all the rounds are complete the winning players name is passed to the champion property\nconst playerWon = (state, { player, roundID }) => {\n    return {\n        ...state,\n        playerCounter: state.playerCounter + 1,\n        players: [...state.players, \n        {\n            playerID: state.playerCounter + 1,\n            name: player,\n            roundID: roundID + 1,\n        }],\n        champion: state.totalRounds === state.rounds.length ? player : null,\n    };\n};\n\n//players who won their game are then added to the rounds array and the players array is emptied again, if all the rounds are complete the complete property becomes true and the tournament is over\nconst nextRound = (state) => {\n    let updateRounds = addGameID(state.players);\n    let complete = state.roundsCompleted + 1 === state.totalRounds;\n\n    return {\n        ...state,\n        players: initial.players,\n        rounds: [...state.rounds, updateRounds],\n        roundsCompleted: state.roundsCompleted + 1,\n        playerCounter: initial.playerCounter,\n        complete,\n    };\n};\n\n//used to reset the global state to inital, to start a new tournament\nconst reset = () => {\n    return {\n        ...initial,\n    };\n};\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_PLAYER\": return addPlayer(state, action);\n        case \"START_TOURNAMENT\": return startTournament(state, action);\n        case \"ERROR\": return playerNumberError(state);\n        case \"PLAYER_WON\": return playerWon(state, action);\n        case \"NEXT_ROUND\": return nextRound(state);\n        case \"RESET\": return reset();\n        default: return state;\n    };\n};\n\nexport default reducer;\n","//helper function randomises the order of array elements in-place using Durstenfeld shuffle algorithm\n\nexport const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i -=1 ) {\n        let j = Math.floor(Math.random() * (i + 1));\n        // swap elements array[i] and array[j] using destructuring assignment\n        [array[i], array[j]] = [array[j], array[i]];\n    };\n    return array;\n};","import { createStore, compose } from 'redux';\n\nimport reducer from './reducer';\nimport initial from './initial';\n\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer, \n    initial,\n    composeEnhancers() \n  );\n  \nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './style/css/styles.css';\nimport App from './components/App';\nimport store from './data/store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}